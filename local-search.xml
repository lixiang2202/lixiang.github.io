<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>传输控制协议（TCP）</title>
    <link href="/2024/12/04/TCP/"/>
    <url>/2024/12/04/TCP/</url>
    
    <content type="html"><![CDATA[<h1 id="传输控制协议（TCP）"><a href="#传输控制协议（TCP）" class="headerlink" title="传输控制协议（TCP）"></a>传输控制协议（TCP）</h1><p>​        TCP是一个复杂、可靠、面向连接的协议。<br>​        TCP提供客户与服务器之间的<strong>连接</strong>。TCP客户端先与某个给定服务器建立一个连接，在跨该连接与那个服务器交换数据，然后终止这个连接。<br>​        TCP提供了<strong>可靠性</strong><code>reliability</code>。当TCP向另一端发送数据时，它要求对端返回一个确认。如果没有收到确认，TCP就自动重传数据并等待更长时间。在数次重传失败后，TCP才放弃。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="一般为4~10分钟，依赖于具体实现。">[1]</span></a></sup><br>​        TCP含有用于动态估算客户和服务器之间的<strong>往返时间</strong><code>RTT</code>的算法。<br>​        TCP通过给其中每个字节关联一个序列号所发送的数据进行排序。<br>​        TCP提供<strong>流量控制</strong><code>flow control</code>。TCP总是告知对端在任何时刻它一次能够从对端接受多少字节的数据，称为<strong>通告窗口</strong><code>advertised window</code>。<br>​        TCP是<strong>全双工的</strong><code>full-duplex</code>。</p><h2 id="TCP连接的建立和终止"><a href="#TCP连接的建立和终止" class="headerlink" title="TCP连接的建立和终止"></a>TCP连接的建立和终止</h2><h3 id="三路握手"><a href="#三路握手" class="headerlink" title="三路握手"></a>三路握手</h3><p><img src="https://gitee.com/lixiang2202/pic-bed/raw/master/img/202111172259489.png" alt="image-20211117225950461"></p><ol><li>服务器必须准备好接受外来的连接。<br>通常通过调用<code>socket</code>、<code>bind</code>、和<code>listen</code>这三个函数来完成。称之为<strong>被动打开</strong>（passive open）。</li><li>客户端通过调用<code>connect</code>发起主动打开。<br>这导致客户TCP发送一个SYN分节，告诉服务器客户将在连接中发送的数据的初始序列号。tongchangSYN分节不携带数据（IP首部、TCP首部和可能有的TCP选项）。</li><li>服务器必须确认（ACK）客户端的SYN，同时自己也得发送一个SYN，它含有服务器在同一连接中发送的数据的初始序号。服务器在单个分节中发送SYN和对客户SYN的ACK。</li><li>客户端必须确认服务器的SYN。</li></ol><p>​        这种交换至少需要3个分组，因此称之为TCP的三路握手（three-way handshake）。<br>​        上图中客户端初始序列号为<code>J</code>，服务器初始序列号为<code>K</code>。ACK中的确认好是发送这个ACK的一端所期待的下一个序列号。</p><h3 id="TCP选项"><a href="#TCP选项" class="headerlink" title="TCP选项"></a>TCP选项</h3><p>​        每个SYN可以含有多个TCP选项。</p><ul><li><strong>MSS选项</strong><br>发送SYN的TCP一端通告对端他的<strong>最大分节大小</strong>（maximum segment size），也就是它在本连接的每个TCP分节中愿意接受的最大数据量。<br><code>TCP_MAXSEG</code>套接字选项提取和设置这个TCP选项。</li><li><strong>窗口规模选项</strong><br>两种实现<ul><li>TCP首部中响应字段占16未，所以最大窗口大小是65535；</li><li>指定TCP首部中的通告窗口必须扩大（左移）的位数（0~14），最大窗口大小接近1GB（65535x2^14^）。</li></ul></li><li><strong>时间戳选项</strong><br>对于高速连接是必要的。防止失而复得的分组可能造成的数据损坏。</li></ul><h3 id="TCP连接终止"><a href="#TCP连接终止" class="headerlink" title="TCP连接终止"></a>TCP连接终止</h3><p>​        TCP终止一个连接需分4个分节。</p><p><img src="https://gitee.com/lixiang2202/pic-bed/raw/master/img/202111172259558.png" alt="image-20211117225929528"></p><ol><li>某个应用进程首先调用<code>close</code>，称为该端执行<strong>主动关闭</strong><code>active close</code>。该端的TCP于是发送一个<strong>FIN</strong>分节，表示数据发送完毕。</li><li>接受到这个<strong>FIN</strong>的对端执行<strong>被动关闭</strong><code>passive close</code>。这个<strong>FIN</strong>由TCP确认。<br>它的接受作为一个文件结束符传递给应用进程，因为<strong>FIN</strong>的接受意味着连接上再无额外的可接数据。</li><li>一段时间后，接受到这个文件结束符的应用进程将调用<code>close</code>关闭它的套接字。导致TCP发送一个<strong>FIN</strong>。</li><li>接受这个最终<strong>FIN</strong>的原发送端TCP确认这个<strong>FIN</strong>。</li></ol><blockquote><p>某些情形下，步骤1的<strong>FIN</strong>都随数据一起发送。步骤2、3有可能合并成一个分节。</p></blockquote><p>​        类似SYN，一个FIN也占据1个字节的序列号空间。每个FIN的ACK确认好就是这个FIN的序列号加1。</p><h3 id="TCP状态转换图"><a href="#TCP状态转换图" class="headerlink" title="TCP状态转换图"></a>TCP状态转换图</h3><p>​        TCP为一个连接定义了11种状态。下图为<strong>状态转换图</strong>，粗实线表示通常的客户端装换状态，粗虚线表示通常的服务器状态转换。</p><p><img src="https://gitee.com/lixiang2202/pic-bed/raw/master/img/202111172313088.png" alt="image-20211117231351036"></p><h3 id="观察分组"><a href="#观察分组" class="headerlink" title="观察分组"></a>观察分组</h3><p>​        下图的客户端通告一个值为536的MSS，服务器通告一个值为1460的MSS。</p><p><img src="https://gitee.com/lixiang2202/pic-bed/raw/master/img/202111172322354.png" alt="image-20211117232239287"></p><h2 id="TIME-WAIT"><a href="#TIME-WAIT" class="headerlink" title="TIME_WAIT"></a>TIME_WAIT</h2><p>​        执行主动关闭的那端经历这个状态。这个状态的持续时间是最长分节生命期（maximum segment lifetime，MSL）的两倍，有时称之为2MSL。任何TCP的实现都必须为MSL指定一个值<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="RFC 1122建议2分钟，Berkeley实现是30秒，所以TIME_WAIT状态的持续时间在1分钟~4分钟之间。">[2]</span></a></sup>。MSL是任何IP数据报能够在因特网中存活的最长时间。</p><p>​        TIME_WAIT状态有两个存在的理由：  </p><ul><li>可靠的地实现TCP全双工连接的终止；<br>在TCP连接终止流程中，假如主动关闭端最后一个ACK丢失，服务器会重新发送FIN，此时客户需要始终保持TIME_WAIT状态，否则会响应RST（服务器解释为错误），导致无法正确终止连接。</li><li>允许老的重复分解在网络中消逝。</li><li>TIME_WAIT的持续时间为2MSL，TCP将不处于TIME_WAIT状态的连接发起新的化身。</li></ul><h2 id="基本套接字函数"><a href="#基本套接字函数" class="headerlink" title="基本套接字函数"></a>基本套接字函数</h2><p><img src="https://gitee.com/lixiang2202/pic-bed/raw/master/img/202111221545555.png" alt="image-20211122154501419"></p><h2 id="补充疑问"><a href="#补充疑问" class="headerlink" title="补充疑问"></a>补充疑问</h2><ul><li><input disabled="" type="checkbox"> 滑动窗口、TCP粘包<br><a href="https://blog.csdn.net/weixin_34370347/article/details/92550397?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1.no_search_link&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~default-1.no_search_link">TCP协议详解-滑动窗口</a></li><li><input disabled="" type="checkbox"> </li></ul><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>一般为4~10分钟，依赖于具体实现。<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>RFC 1122建议2分钟，Berkeley实现是30秒，所以TIME_WAIT状态的持续时间在1分钟~4分钟之间。<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TCP,Net</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一篇</title>
    <link href="/2024/12/04/%E7%AC%AC%E4%B8%80%E7%AF%87/"/>
    <url>/2024/12/04/%E7%AC%AC%E4%B8%80%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="这是第一篇文章"><a href="#这是第一篇文章" class="headerlink" title="这是第一篇文章"></a>这是第一篇文章</h1><img src="/2024/12/04/%E7%AC%AC%E4%B8%80%E7%AF%87/1733243359154.png" class="" title="测试图片"><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">// Fill out your copyright notice in the Description page of Project Settings.</span><br><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;FPSCharacter.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;FPSProjectile.h&quot;</span></span><br><br><br><span class="hljs-comment">// Sets default values</span><br>AFPSCharacter::<span class="hljs-built_in">AFPSCharacter</span>()<br>&#123;<br> <span class="hljs-comment">// Set this character to call Tick() every frame.  You can turn this off to improve performance if you don&#x27;t need it.</span><br>PrimaryActorTick.bCanEverTick = <span class="hljs-literal">true</span>;<br><br>FPSCameraComponent = <span class="hljs-built_in">CreateDefaultSubobject</span>&lt;UCameraComponent&gt;(<span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;FirstPersonCamera&quot;</span>));<br>FPSCameraComponent-&gt;<span class="hljs-built_in">SetupAttachment</span>(<span class="hljs-built_in">GetCapsuleComponent</span>());<br>FPSCameraComponent-&gt;<span class="hljs-built_in">SetRelativeLocation</span>(<span class="hljs-built_in">FVector</span>(<span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">50.0f</span> + BaseEyeHeight));<br>FPSCameraComponent-&gt;bUsePawnControlRotation = <span class="hljs-literal">true</span>;<br><br>FPSMesh = <span class="hljs-built_in">CreateDefaultSubobject</span>&lt;USkeletalMeshComponent&gt;(<span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;FirstPersonMesh&quot;</span>));<br>FPSMesh-&gt;<span class="hljs-built_in">SetOnlyOwnerSee</span>(<span class="hljs-literal">true</span>);<br>FPSMesh-&gt;<span class="hljs-built_in">SetupAttachment</span>(FPSCameraComponent);<br>FPSMesh-&gt;bCastDynamicShadow = <span class="hljs-literal">false</span>;<br>FPSMesh-&gt;CastShadow = <span class="hljs-literal">false</span>;<br><br><span class="hljs-built_in">GetMesh</span>()-&gt;<span class="hljs-built_in">SetOwnerNoSee</span>(<span class="hljs-literal">true</span>);<br><br>&#125;<br><br><span class="hljs-comment">// Called when the game starts or when spawned</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">AFPSCharacter::BeginPlay</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>Super::<span class="hljs-built_in">BeginPlay</span>();<br><span class="hljs-built_in">check</span>(GEngine != <span class="hljs-literal">nullptr</span>);<br><br>    GEngine-&gt;<span class="hljs-built_in">AddOnScreenDebugMessage</span>(<span class="hljs-number">-1</span>, <span class="hljs-number">5.f</span>, FColor::Red, <span class="hljs-built_in">TEXT</span>(<span class="hljs-string">&quot;We are using FPSCharacter!&quot;</span>));<br>&#125;<br><br><span class="hljs-comment">// Called every frame</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">AFPSCharacter::Tick</span><span class="hljs-params">(<span class="hljs-type">float</span> DeltaTime)</span></span><br><span class="hljs-function"></span>&#123;<br>Super::<span class="hljs-built_in">Tick</span>(DeltaTime);<br><br>&#125;<br><br><span class="hljs-comment">// Called to bind functionality to input</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">AFPSCharacter::SetupPlayerInputComponent</span><span class="hljs-params">(UInputComponent* PlayerInputComponent)</span></span><br><span class="hljs-function"></span>&#123;<br>Super::<span class="hljs-built_in">SetupPlayerInputComponent</span>(PlayerInputComponent);<br><br>PlayerInputComponent-&gt;<span class="hljs-built_in">BindAxis</span>(<span class="hljs-string">&quot;MoveForward&quot;</span>, <span class="hljs-keyword">this</span>, &amp;AFPSCharacter::MoveForward);<br>    PlayerInputComponent-&gt;<span class="hljs-built_in">BindAxis</span>(<span class="hljs-string">&quot;MoveRight&quot;</span>, <span class="hljs-keyword">this</span>, &amp;AFPSCharacter::MoveRight);<br>    PlayerInputComponent-&gt;<span class="hljs-built_in">BindAxis</span>(<span class="hljs-string">&quot;Turn&quot;</span>, <span class="hljs-keyword">this</span>, &amp;AFPSCharacter::AddControllerYawInput);<br>    PlayerInputComponent-&gt;<span class="hljs-built_in">BindAxis</span>(<span class="hljs-string">&quot;LookUp&quot;</span>, <span class="hljs-keyword">this</span>, &amp;AFPSCharacter::AddControllerPitchInput);<br>    PlayerInputComponent-&gt;<span class="hljs-built_in">BindAction</span>(<span class="hljs-string">&quot;Jump&quot;</span>, IE_Pressed, <span class="hljs-keyword">this</span>, &amp;AFPSCharacter::StartJump);<br>    PlayerInputComponent-&gt;<span class="hljs-built_in">BindAction</span>(<span class="hljs-string">&quot;Jump&quot;</span>, IE_Released, <span class="hljs-keyword">this</span>, &amp;AFPSCharacter::StopJump);<br>PlayerInputComponent-&gt;<span class="hljs-built_in">BindAction</span>(<span class="hljs-string">&quot;Fire&quot;</span>, IE_Pressed, <span class="hljs-keyword">this</span>, &amp;AFPSCharacter::Fire);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">AFPSCharacter::MoveForward</span><span class="hljs-params">(<span class="hljs-type">float</span> Value)</span></span><br><span class="hljs-function"></span>&#123;<br>    FVector Direction = <span class="hljs-built_in">FRotationMatrix</span>(Controller-&gt;<span class="hljs-built_in">GetControlRotation</span>()).<span class="hljs-built_in">GetScaledAxis</span>(EAxis::X);<br><span class="hljs-built_in">AddMovementInput</span>(Direction, Value);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">AFPSCharacter::MoveRight</span><span class="hljs-params">(<span class="hljs-type">float</span> Value)</span></span><br><span class="hljs-function"></span>&#123;<br>    FVector Direction = <span class="hljs-built_in">FRotationMatrix</span>(Controller-&gt;<span class="hljs-built_in">GetControlRotation</span>()).<span class="hljs-built_in">GetScaledAxis</span>(EAxis::Y);<br>    <span class="hljs-built_in">AddMovementInput</span>(Direction, Value);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">AFPSCharacter::StartJump</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    bPressedJump = <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">AFPSCharacter::StopJump</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    bPressedJump = <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">AFPSCharacter::Fire</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span> (ProjectileClass)<br>&#123;<br>FVector CameraLocation;<br>FRotator CameraRotation;<br><span class="hljs-built_in">GetActorEyesViewPoint</span>(CameraLocation, CameraRotation);<br><br>MuzzleOffset.<span class="hljs-built_in">Set</span>(<span class="hljs-number">100.0f</span>, <span class="hljs-number">0.0f</span>, <span class="hljs-number">0.0f</span>);<br>FVector MuzzleLocation = CameraLocation + <span class="hljs-built_in">FTransform</span>(CameraRotation).<span class="hljs-built_in">TransformVector</span>(MuzzleOffset);<br>FRotator MuzzleRotation = CameraRotation;<br><span class="hljs-comment">// MuzzleRotation.Pitch += 10.f;</span><br><br>UWorld* World = <span class="hljs-built_in">GetWorld</span>();<br><span class="hljs-keyword">if</span> (World)<br>&#123;<br>FActorSpawnParameters SpawnParams;<br>SpawnParams.Owner = <span class="hljs-keyword">this</span>;<br>SpawnParams.Instigator = <span class="hljs-built_in">GetInstigator</span>();<br><br>AFPSProjectile* Projectile = World-&gt;<span class="hljs-built_in">SpawnActor</span>&lt;AFPSProjectile&gt;(ProjectileClass, MuzzleLocation, MuzzleRotation, SpawnParams);<br><span class="hljs-keyword">if</span> (Projectile)<br>&#123;<br>FVector LaunchDirection = MuzzleRotation.<span class="hljs-built_in">Vector</span>();<br>Projectile-&gt;<span class="hljs-built_in">FireInDirection</span>(LaunchDirection);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>UE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tag1</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
